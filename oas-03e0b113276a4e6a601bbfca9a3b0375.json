{
  "oas": {
    "components": {
      "schemas": {
        "Body_qrcode_post_form_qrcode_form_post": {
          "properties": {
            "border": {
              "title": "Border",
              "type": "integer"
            },
            "box_size": {
              "title": "Box Size",
              "type": "integer"
            },
            "url": {
              "title": "Url",
              "type": "string"
            }
          },
          "required": [
            "url",
            "box_size",
            "border"
          ],
          "title": "Body_qrcode_post_form_qrcode_form_post",
          "type": "object"
        },
        "Body_test_password_manager_form_test_password_manager_form_post_post": {
          "properties": {
            "password": {
              "title": "Password",
              "type": "string"
            },
            "username": {
              "title": "Username",
              "type": "string"
            }
          },
          "required": [
            "username",
            "password"
          ],
          "title": "Body_test_password_manager_form_test_password_manager_form_post_post",
          "type": "object"
        },
        "HTTPValidationError": {
          "properties": {
            "detail": {
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              },
              "title": "Detail",
              "type": "array"
            }
          },
          "title": "HTTPValidationError",
          "type": "object"
        },
        "QRCode": {
          "properties": {
            "border": {
              "default": 2,
              "maximum": 20,
              "title": "Border",
              "type": "integer"
            },
            "box_size": {
              "default": 10,
              "maximum": 20,
              "title": "Box Size",
              "type": "integer"
            },
            "url": {
              "maxLength": 1000,
              "minLength": 10,
              "title": "Url",
              "type": "string"
            }
          },
          "required": [
            "url"
          ],
          "title": "QRCode",
          "type": "object"
        },
        "ValidationError": {
          "properties": {
            "loc": {
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ]
              },
              "title": "Location",
              "type": "array"
            },
            "msg": {
              "title": "Message",
              "type": "string"
            },
            "type": {
              "title": "Error Type",
              "type": "string"
            }
          },
          "required": [
            "loc",
            "msg",
            "type"
          ],
          "title": "ValidationError",
          "type": "object"
        }
      }
    },
    "info": {
      "contact": {
        "name": "MK"
      },
      "description": "Httpbin",
      "title": "FastAPI Httpbin",
      "version": "0.0.46"
    },
    "openapi": "3.0.2",
    "paths": {
      "/anything": {
        "delete": {
          "operationId": "delete_anything_delete",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns anything that is passed into the request.",
          "tags": [
            "Anything"
          ]
        },
        "get": {
          "operationId": "get_anything_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns anything that is passed into the request.",
          "tags": [
            "Anything"
          ]
        },
        "patch": {
          "operationId": "patch_anything_patch",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns anything that is passed into the request.",
          "tags": [
            "Anything"
          ]
        },
        "post": {
          "operationId": "post_anything_post",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns anything that is passed into the request.",
          "tags": [
            "Anything"
          ]
        },
        "put": {
          "operationId": "put_anything_put",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns anything that is passed into the request.",
          "tags": [
            "Anything"
          ]
        }
      },
      "/cache": {
        "get": {
          "operationId": "cache_cache_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.",
          "tags": [
            "Responses"
          ]
        }
      },
      "/cache/{seconds}": {
        "get": {
          "operationId": "cache_seconds_cache__seconds__get",
          "parameters": [
            {
              "example": 3,
              "in": "path",
              "name": "seconds",
              "required": true,
              "schema": {
                "title": "Seconds",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Sets a Cache-Control header for n seconds.",
          "tags": [
            "Responses"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "seconds",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "/cookies": {
        "delete": {
          "operationId": "delete_cookies_delete",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {},
                  "title": "Cookies",
                  "type": "array"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Delete one or more cookies.",
          "tags": [
            "Cookies"
          ]
        },
        "get": {
          "operationId": "get_cookies_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Show current cookies in the browser.",
          "tags": [
            "Cookies"
          ]
        },
        "put": {
          "operationId": "put_cookies_put",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Cookies",
                  "type": "object"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Set one or more cookies.",
          "tags": [
            "Cookies"
          ]
        }
      },
      "/delay/{seconds}": {
        "get": {
          "operationId": "delay_delay__seconds__get",
          "parameters": [
            {
              "example": 3,
              "in": "path",
              "name": "seconds",
              "required": true,
              "schema": {
                "title": "Seconds",
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "debug",
              "schema": {
                "title": "Debug",
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Return a delayed response (max of 10 seconds).",
          "tags": [
            "Dynamic Data"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "seconds",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "/delete": {
        "delete": {
          "operationId": "delete_delete_delete",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "example": "Hola! Mock DELETE response!",
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "The request's DELETE parameters.",
          "tags": [
            "HTTP Methods"
          ]
        }
      },
      "/deny": {
        "get": {
          "operationId": "deny_deny_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns a page denied by rules in robots.txt.",
          "tags": [
            "Response Formats"
          ]
        }
      },
      "/encoding/utf8": {
        "get": {
          "operationId": "utf8_encoding_utf8_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns a UTF-8 Encoded body.",
          "tags": [
            "Response Formats"
          ]
        }
      },
      "/etag/{etag}": {
        "get": {
          "operationId": "etag_etag__etag__get",
          "parameters": [
            {
              "example": "test-etag",
              "in": "path",
              "name": "etag",
              "required": true,
              "schema": {
                "title": "Etag",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.",
          "tags": [
            "Responses"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "etag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "/favicon.ico": {
        "get": {
          "operationId": "favicon_favicon_ico_get",
          "responses": {
            "200": {
              "content": {
                "image/jpeg": {}
              },
              "description": "Return a 32x32 favicon in JPG format."
            }
          },
          "summary": "Favicon endpoint",
          "tags": [
            "Images"
          ]
        }
      },
      "/get": {
        "get": {
          "operationId": "get_get_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "example": "Hola! Mock GET response!",
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "The request's GET parameters.",
          "tags": [
            "HTTP Methods"
          ]
        }
      },
      "/headers": {
        "get": {
          "operationId": "get_headers_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Return the headers sent in the request.",
          "tags": [
            "Request Inspection"
          ]
        }
      },
      "/html": {
        "get": {
          "operationId": "html_html_get",
          "responses": {
            "200": {
              "content": {
                "text/html": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns an HTML document.",
          "tags": [
            "Response Formats"
          ]
        }
      },
      "/images/heic": {
        "get": {
          "operationId": "get_images_heic_get",
          "responses": {
            "200": {
              "content": {
                "image/heic": {}
              },
              "description": "Return an image in HEIC format."
            }
          },
          "summary": "Returns a HEIC image. (This may not be displayed correctly in some browsers)",
          "tags": [
            "Images"
          ]
        }
      },
      "/images/jpeg": {
        "get": {
          "operationId": "get_images_jpeg_get",
          "responses": {
            "200": {
              "content": {
                "image/jpeg": {}
              },
              "description": "Return an image in JPG format."
            }
          },
          "summary": "Returns a JPEG image.",
          "tags": [
            "Images"
          ]
        }
      },
      "/images/png": {
        "get": {
          "operationId": "get_images_png_get",
          "responses": {
            "200": {
              "content": {
                "image/png": {}
              },
              "description": "Return an image in PNG format."
            }
          },
          "summary": "Returns a PNG image.",
          "tags": [
            "Images"
          ]
        }
      },
      "/images/webp": {
        "get": {
          "operationId": "get_images_webp_get",
          "responses": {
            "200": {
              "content": {
                "image/webp": {}
              },
              "description": "Return an image in Webp format."
            }
          },
          "summary": "Returns a Webp image.",
          "tags": [
            "Images"
          ]
        }
      },
      "/ip": {
        "get": {
          "operationId": "ip_ip_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Return the user's IP address.",
          "tags": [
            "Request Inspection"
          ]
        }
      },
      "/ip/v4": {
        "get": {
          "operationId": "ipv4_ip_v4_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Return the user's IPv4 address, if present."
            },
            "422": {
              "description": "Returned if user came in over IPv6"
            }
          },
          "summary": "Return the user's IPv4 address (if present).",
          "tags": [
            "Request Inspection"
          ]
        }
      },
      "/ip/v6": {
        "get": {
          "operationId": "ipv6_ip_v6_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Return the user's IPv6 address, if present."
            },
            "422": {
              "description": "Returned if user came in over IPv4"
            }
          },
          "summary": "Return the user's IPv6 address (if present).",
          "tags": [
            "Request Inspection"
          ]
        }
      },
      "/json": {
        "get": {
          "operationId": "json_json_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns a JSON document.",
          "tags": [
            "Response Formats"
          ]
        }
      },
      "/patch": {
        "patch": {
          "operationId": "patch_patch_patch",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "example": "Hola! Mock PATCH response!",
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "The request's PATCH parameters. (Use -d in curl to specify data in JSON format)",
          "tags": [
            "HTTP Methods"
          ]
        }
      },
      "/post": {
        "post": {
          "operationId": "post_post_post",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "example": "Hola! Mock POST response!",
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "The request's POST parameters. (Use -d in curl to specify data in JSON format)",
          "tags": [
            "HTTP Methods"
          ]
        }
      },
      "/put": {
        "put": {
          "operationId": "put_put_put",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "example": "Hola! Mock PUT response!",
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "The request's PUT parameters. (Use -d in curl to specify data in JSON format)",
          "tags": [
            "HTTP Methods"
          ]
        }
      },
      "/qrcode/form": {
        "post": {
          "operationId": "qrcode_post_form_qrcode_form_post",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Body_qrcode_post_form_qrcode_form_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "image/png": {}
              },
              "description": "Return a QR Code in PNG format."
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Returns a QR Code in PNG format from form submission.",
          "tags": [
            "QR Codes"
          ]
        }
      },
      "/qrcode/json": {
        "post": {
          "operationId": "qrcode_post_qrcode_json_post",
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QRCode"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "content": {
                "image/png": {}
              },
              "description": "Return a QR Code in PNG format."
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Returns a QR code in PNG format from POSTed JSON.",
          "tags": [
            "QR Codes"
          ]
        }
      },
      "/redirect/{n}": {
        "delete": {
          "operationId": "delete_redirect__n__delete",
          "parameters": [
            {
              "description": "Number of redirects to perform",
              "example": 3,
              "in": "path",
              "name": "n",
              "required": true,
              "schema": {
                "description": "Number of redirects to perform",
                "title": "N",
                "type": "integer"
              }
            },
            {
              "description": "Status code passed in from a previous redirect",
              "example": 301,
              "in": "query",
              "name": "code",
              "schema": {
                "default": 302,
                "description": "Status code passed in from a previous redirect",
                "title": "Code",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "302 Redirects n times. (Note that Swagger follows redirects, so use the Curl command to see redirect headers.",
          "tags": [
            "Redirects"
          ]
        },
        "get": {
          "operationId": "get_redirect__n__get",
          "parameters": [
            {
              "description": "Number of redirects to perform",
              "example": 3,
              "in": "path",
              "name": "n",
              "required": true,
              "schema": {
                "description": "Number of redirects to perform",
                "title": "N",
                "type": "integer"
              }
            },
            {
              "description": "Status code passed in from a previous redirect",
              "example": 301,
              "in": "query",
              "name": "code",
              "schema": {
                "default": 302,
                "description": "Status code passed in from a previous redirect",
                "title": "Code",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "302 Redirects n times. (Note that Swagger follows redirects, so use the Curl command to see redirect headers.",
          "tags": [
            "Redirects"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "patch": {
          "operationId": "patch_redirect__n__patch",
          "parameters": [
            {
              "description": "Number of redirects to perform",
              "example": 3,
              "in": "path",
              "name": "n",
              "required": true,
              "schema": {
                "description": "Number of redirects to perform",
                "title": "N",
                "type": "integer"
              }
            },
            {
              "description": "Status code passed in from a previous redirect",
              "example": 301,
              "in": "query",
              "name": "code",
              "schema": {
                "default": 302,
                "description": "Status code passed in from a previous redirect",
                "title": "Code",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "302 Redirects n times. (Note that Swagger follows redirects, so use the Curl command to see redirect headers.",
          "tags": [
            "Redirects"
          ]
        },
        "post": {
          "operationId": "post_redirect__n__post",
          "parameters": [
            {
              "description": "Number of redirects to perform",
              "example": 3,
              "in": "path",
              "name": "n",
              "required": true,
              "schema": {
                "description": "Number of redirects to perform",
                "title": "N",
                "type": "integer"
              }
            },
            {
              "description": "Status code passed in from a previous redirect",
              "example": 301,
              "in": "query",
              "name": "code",
              "schema": {
                "default": 302,
                "description": "Status code passed in from a previous redirect",
                "title": "Code",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "302 Redirects n times. (Note that Swagger follows redirects, so use the Curl command to see redirect headers.",
          "tags": [
            "Redirects"
          ]
        },
        "put": {
          "operationId": "put_redirect__n__put",
          "parameters": [
            {
              "description": "Number of redirects to perform",
              "example": 3,
              "in": "path",
              "name": "n",
              "required": true,
              "schema": {
                "description": "Number of redirects to perform",
                "title": "N",
                "type": "integer"
              }
            },
            {
              "description": "Status code passed in from a previous redirect",
              "example": 301,
              "in": "query",
              "name": "code",
              "schema": {
                "default": 302,
                "description": "Status code passed in from a previous redirect",
                "title": "Code",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "302 Redirects n times. (Note that Swagger follows redirects, so use the Curl command to see redirect headers.",
          "tags": [
            "Redirects"
          ]
        }
      },
      "/response-headers": {
        "get": {
          "operationId": "response_headers_get_response_headers_get",
          "parameters": [
            {
              "in": "query",
              "name": "headers",
              "schema": {
                "default": [],
                "items": {
                  "type": "string"
                },
                "title": "Headers",
                "type": "array"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Set arbitrary headers in the response.  Input strings should be in the format of 'header:value'.",
          "tags": [
            "Responses"
          ]
        }
      },
      "/robots.txt": {
        "get": {
          "operationId": "robots_txt_robots_txt_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns some robots.txt rules.",
          "tags": [
            "Response Formats"
          ]
        }
      },
      "/static/logo.png": {
        "get": {
          "operationId": "logo_static_logo_png_get",
          "responses": {
            "200": {
              "content": {
                "image/jpeg": {}
              },
              "description": "Return the logo."
            }
          },
          "summary": "Logo endpoint",
          "tags": [
            "Images"
          ]
        }
      },
      "/status/{codes}": {
        "delete": {
          "operationId": "get_status__codes__delete",
          "parameters": [
            {
              "example": "200,201,204",
              "in": "path",
              "name": "codes",
              "required": true,
              "schema": {
                "minLength": 3,
                "pattern": "^[0-9,_]+$",
                "title": "Codes",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Return status code or random one if multiple given as comma-delimited list (Underscores are also permitted as delimiters)",
          "tags": [
            "Status Codes"
          ]
        },
        "get": {
          "operationId": "get_status__codes__get",
          "parameters": [
            {
              "example": "200,201,204",
              "in": "path",
              "name": "codes",
              "required": true,
              "schema": {
                "minLength": 3,
                "pattern": "^[0-9,_]+$",
                "title": "Codes",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "example": "Hola! Mock PATCH response!",
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Return status code or random one if multiple given as comma-delimited list (Underscores are also permitted as delimiters)",
          "tags": [
            "Status Codes"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "codes",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "patch": {
          "operationId": "get_status__codes__patch",
          "parameters": [
            {
              "example": "200,201,204",
              "in": "path",
              "name": "codes",
              "required": true,
              "schema": {
                "minLength": 3,
                "pattern": "^[0-9,_]+$",
                "title": "Codes",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Return status code or random one if multiple given as comma-delimited list (Underscores are also permitted as delimiters)",
          "tags": [
            "Status Codes"
          ]
        },
        "post": {
          "operationId": "get_status__codes__post",
          "parameters": [
            {
              "example": "200,201,204",
              "in": "path",
              "name": "codes",
              "required": true,
              "schema": {
                "minLength": 3,
                "pattern": "^[0-9,_]+$",
                "title": "Codes",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Return status code or random one if multiple given as comma-delimited list (Underscores are also permitted as delimiters)",
          "tags": [
            "Status Codes"
          ]
        },
        "put": {
          "operationId": "get_status__codes__put",
          "parameters": [
            {
              "example": "200,201,204",
              "in": "path",
              "name": "codes",
              "required": true,
              "schema": {
                "minLength": 3,
                "pattern": "^[0-9,_]+$",
                "title": "Codes",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Return status code or random one if multiple given as comma-delimited list (Underscores are also permitted as delimiters)",
          "tags": [
            "Status Codes"
          ]
        }
      },
      "/stream/chars/complete/{n}/{rate}": {
        "get": {
          "operationId": "stream_chars_complete_stream_chars_complete__n___rate__get",
          "parameters": [
            {
              "example": 128,
              "in": "path",
              "name": "n",
              "required": true,
              "schema": {
                "title": "N",
                "type": "integer"
              }
            },
            {
              "example": 50,
              "in": "path",
              "name": "rate",
              "required": true,
              "schema": {
                "title": "Rate",
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "debug",
              "schema": {
                "title": "Debug",
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Stream n bytes (max 100K) at a rate of rate per second. Any outstanding characters due to a low rate will be sent at the very end.  Max time is 10 seconds.",
          "tags": [
            "Dynamic Data"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "rate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "/stream/chars/{n}/{rate}": {
        "get": {
          "operationId": "stream_chars_stream_chars__n___rate__get",
          "parameters": [
            {
              "example": 128,
              "in": "path",
              "name": "n",
              "required": true,
              "schema": {
                "title": "N",
                "type": "integer"
              }
            },
            {
              "example": 50,
              "in": "path",
              "name": "rate",
              "required": true,
              "schema": {
                "title": "Rate",
                "type": "integer"
              }
            },
            {
              "in": "query",
              "name": "debug",
              "schema": {
                "title": "Debug",
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Stream n bytes (max 100K) at a rate of rate per second. Max time is 20 seconds.",
          "tags": [
            "Dynamic Data"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "n",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "rate",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "/stream/{n}": {
        "get": {
          "operationId": "stream_stream__n__get",
          "parameters": [
            {
              "example": 3,
              "in": "path",
              "name": "n",
              "required": true,
              "schema": {
                "title": "N",
                "type": "integer"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Steam n JSON responses.  (max of 100)",
          "tags": [
            "Dynamic Data"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "/test-password-manager-form/post": {
        "post": {
          "operationId": "test_password_manager_form_test_password_manager_form_post_post",
          "requestBody": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/Body_test_password_manager_form_test_password_manager_form_post_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Valid credentials were supplied. (username: dmuth, password: password)"
            },
            "401": {
              "description": "Invalid credentials were supplied"
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Process a sample login",
          "tags": [
            "Forms"
          ]
        }
      },
      "/user-agent": {
        "get": {
          "operationId": "user_agent_user_agent_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Request the User Agent.",
          "tags": [
            "Request Inspection"
          ]
        }
      },
      "/uuid": {
        "get": {
          "operationId": "uuid_uuid_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Return a type 4 UUID.",
          "tags": [
            "Dynamic Data"
          ]
        }
      },
      "/uuid/qrcode": {
        "get": {
          "operationId": "uuid_qrcode_uuid_qrcode_get",
          "responses": {
            "200": {
              "content": {
                "image/png": {}
              },
              "description": "Return a QR Code in PNG format."
            }
          },
          "summary": "Return a QR code of a type 4 UUID.",
          "tags": [
            "Dynamic Data"
          ]
        }
      },
      "/uuid/qrcode/{uuid}": {
        "get": {
          "operationId": "uuid_qrcode_qrcode_uuid_qrcode__uuid__get",
          "parameters": [
            {
              "in": "path",
              "name": "uuid",
              "required": true,
              "schema": {
                "title": "Uuid",
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "content": {
                "image/png": {}
              },
              "description": "Return a QR Code in PNG format."
            },
            "422": {
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              },
              "description": "Validation Error"
            }
          },
          "summary": "Return a QR code of a *specified* type 4 UUID.",
          "tags": [
            "Dynamic Data"
          ]
        },
        "parameters": [
          {
            "in": "path",
            "name": "uuid",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      },
      "/version": {
        "get": {
          "operationId": "version_version_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string"
                  }
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "The version of this app.",
          "tags": [
            "Meta"
          ]
        }
      },
      "/xml": {
        "get": {
          "operationId": "xml_xml_get",
          "responses": {
            "200": {
              "content": {
                "application/json": {
                  "schema": {}
                }
              },
              "description": "Successful Response"
            }
          },
          "summary": "Returns an XML document",
          "tags": [
            "Response Formats"
          ]
        }
      }
    },
    "servers": [
      {
        "url": "http://localhost:8080/ambertest"
      },
      {
        "description": "httpbin",
        "url": "https://httpbin.dmuth.org"
      }
    ],
    "tags": [
      {
        "description": "Testing different HTTP verbs.",
        "name": "HTTP Methods"
      },
      {
        "description": "Inspect the request data. (including source IP address)",
        "name": "Request Inspection"
      },
      {
        "description": "Inspect response data like caching and headers.",
        "name": "Responses"
      },
      {
        "description": "Returns responses in different formats.",
        "name": "Response Formats"
      },
      {
        "description": "Generate QR Codes.",
        "name": "QR Codes"
      },
      {
        "description": "Generate random and dynamic data.",
        "name": "Dynamic Data"
      },
      {
        "description": "Generate responses with specified status codes.",
        "name": "Status Codes"
      },
      {
        "description": "Return different redirects.",
        "name": "Redirects"
      },
      {
        "description": "Return anything that is passed in on the request.",
        "name": "Anything"
      },
      {
        "description": "Create, read, and delete cookies.",
        "name": "Cookies"
      },
      {
        "description": "Return different image formats.",
        "name": "Images"
      },
      {
        "description": "Endpoints for testing out forms.",
        "name": "Forms"
      },
      {
        "description": "Endpoints related to this app itself.",
        "name": "Meta"
      }
    ],
    "x-tyk-api-gateway": {
      "info": {
        "dbId": "68664576dad0420001bdea76",
        "id": "03e0b113276a4e6a601bbfca9a3b0375",
        "name": "FastAPI Httpbin",
        "orgId": "6863d7d9dad0420001b7ab63",
        "state": {
          "active": true
        }
      },
      "middleware": {
        "global": {
          "contextVariables": {
            "enabled": true
          },
          "trafficLogs": {
            "enabled": true
          }
        },
        "operations": {
          "cache_cache_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "cache_seconds_cache__seconds__get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "delay_delay__seconds__get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "delete_anything_delete": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "delete_cookies_delete": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "delete_delete_delete": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "delete_redirect__n__delete": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "deny_deny_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "etag_etag__etag__get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "get_anything_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "get_cookies_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "get_get_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "get_headers_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "get_redirect__n__get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "get_status__codes__delete": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "get_status__codes__get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "get_status__codes__patch": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "get_status__codes__post": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "get_status__codes__put": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "html_html_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "ip_ip_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "ipv4_ip_v4_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "ipv6_ip_v6_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "json_json_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "patch_anything_patch": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "patch_patch_patch": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "patch_redirect__n__patch": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "post_anything_post": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "post_post_post": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "post_redirect__n__post": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "put_anything_put": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "put_cookies_put": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "put_put_put": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "put_redirect__n__put": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "qrcode_post_form_qrcode_form_post": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "qrcode_post_qrcode_json_post": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "response_headers_get_response_headers_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "robots_txt_robots_txt_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "stream_chars_complete_stream_chars_complete__n___rate__get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "stream_chars_stream_chars__n___rate__get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "stream_stream__n__get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "test_password_manager_form_test_password_manager_form_post_post": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "user_agent_user_agent_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "utf8_encoding_utf8_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "uuid_qrcode_qrcode_uuid_qrcode__uuid__get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "uuid_uuid_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "version_version_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          },
          "xml_xml_get": {
            "mockResponse": {
              "enabled": true,
              "fromOASExamples": {
                "enabled": true
              }
            }
          }
        }
      },
      "server": {
        "listenPath": {
          "strip": true,
          "value": "/ambertest"
        }
      },
      "upstream": {
        "url": "https://httpbin.dmuth.org"
      }
    }
  },
  "hook_references": [],
  "is_site": false,
  "sort_by": 0,
  "user_group_owners": [],
  "user_owners": []
}